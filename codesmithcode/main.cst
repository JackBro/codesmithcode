<%-- 
Name:Code Smith MultiTemplate Code 
Author: tjh V8.0
Description: AutoGernaral Code Tool 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Text" Src="CST\\HelpFile\\Helper.cs" Inherits="" Debug="False" Description="Template description here." %>

<%@ Property Name="STS" Type="SchemaExplorer.TableSchemaCollection" Category="Context" Description="Choose tables" %>
<%@ Property Name="ConnString" Default="Data Source=.;Integrated Security=True" Type="System.String" Category="Web.Config" Description="set Web.Config File" %>
<%@ Property Name="IsReplace" Default="true" Type="System.Boolean" Category="Web.Config" Description="is Replace Web.Config" %>
<%@ Property Name="DataBase" Default="" Type="System.String" Category="Web.Config" Description="set Web.Config DataBase" %>

<%@ Property Name="IsReplace_Models" Default="true" Type="System.Boolean" Category="System" Description="is Replace Models Layers" %>
<%@ Property Name="IsReplace_DAL" Default="true" Type="System.Boolean" Category="System" Description="is Replace DAL Layers" %>
<%@ Property Name="IsReplace_BLL" Default="true" Type="System.Boolean" Category="System" Description="is Replace BLL Layers" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.Engine" %>

<%@ Import Namespace="SchemaExplorer" %>

<%@ Property Name="ModelsNamespace" Default="Models" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="DALNamespace" Default="DAL" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="BLLNamespace" Default="BLL" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="System.IO" %>
<%@ Assembly Name="System.Xml" %>
<%@ Import Namespace="System.Xml" %>

<% MyGo(); %>
OK!
<script runat="template">
public void BuildProject(string frompath,string topath)
{
		
		copyfolder(frompath,topath);

}
public  void copyfolder(string strfrompath, string strtopath)
    {
        if (!Directory.Exists(strfrompath))
        {
            Directory.CreateDirectory(strfrompath);
        }

        string strfoldername = strfrompath.Substring(strfrompath.LastIndexOf("\\") + 1, strfrompath.Length - strfrompath.LastIndexOf("\\") - 1);

        if (!Directory.Exists(strtopath + "\\" + strfoldername))
        {
            Directory.CreateDirectory(strtopath + "\\" + strfoldername);
        }

        string[] strfiles = Directory.GetFiles(strfrompath);


        for (int i = 0; i < strfiles.Length; i++)
        {
            string strfilename = strfiles[i].Substring(strfiles[i].LastIndexOf("\\") + 1, strfiles[i].Length - strfiles[i].LastIndexOf("\\") - 1);
            File.Copy(strfiles[i], strtopath + "\\" + strfoldername + "\\" + strfilename, true);
        }

        DirectoryInfo dirinfo = new DirectoryInfo(strfrompath);
        DirectoryInfo[] zipath = dirinfo.GetDirectories();
        for (int j = 0; j < zipath.Length; j++)
        {
            string strzipath = strfrompath + "\\" + zipath[j].ToString();
            copyfolder(strzipath, strtopath + "\\" + strfoldername);
        }
    }
	

public void MyGo() {
	

		string modelpath = Path + "\\Models\\";
		if (!Directory.Exists(modelpath))
		{
			BuildProject("mySolute\\",Path);
			
		}
		//UpdateCsproj(Path+"\\Models\\Models.csproj");
		
		
		
	foreach(TableSchema ST in STS) {
		// Model
		if (IsReplace_Models)
		{
			CodeTemplate ctModel = this.GetCodeTemplateInstance("CST\\DBMad.Models.cst");
			ctModel.SetProperty("ModelsNamespace",ModelsNamespace);
			ctModel.SetProperty("TargetTable", ST);
			ctModel.RenderToFile(Path + "\\Models\\AutoGenerate\\" + ctModel.GetFileName(), true);
			Helper.Make_csproj_IncludeFile( Path+"\\Models\\Models.csproj","AutoGenerate\\" + ctModel.GetFileName());
			// Model Extender
			CodeTemplate ctModelExtender = this.GetCodeTemplateInstance("CST\\DBMad.Models.Partial.cst");
			ctModelExtender.SetProperty("ModelsNamespace",ModelsNamespace);
			ctModelExtender.SetProperty("TargetTable", ST);
			string cbModelExtenderPath = Path + "\\Models\\" + ctModelExtender.GetFileName();
			if (!File.Exists(cbModelExtenderPath))
			{
				ctModelExtender.RenderToFile(Path + "\\Models\\" + ctModelExtender.GetFileName(), true);
			}
			Helper.Make_csproj_IncludeFile( Path+"\\Models\\Models.csproj", ctModelExtender.GetFileName());
 		}


		
		
		// DAL
		if (IsReplace_DAL)
		{
			CodeTemplate ctDAL = this.GetCodeTemplateInstance("CST\\DBMad.DAL.cst");
			ctDAL.SetProperty("ModelsNamespace",ModelsNamespace);
			ctDAL.SetProperty("DALNamespace",DALNamespace);
			ctDAL.SetProperty("DALClassNameSurfix","Service");
			ctDAL.SetProperty("TargetTable", ST);
			ctDAL.RenderToFile(Path + "\\DAL\\AutoGenerate\\" + ctDAL.GetFileName(), true);
			Helper.Make_csproj_IncludeFile( Path+"\\DAL\\DAL.csproj", "AutoGenerate\\" + ctDAL.GetFileName());
			// DAL Extender
		    CodeTemplate ctDALExtender = this.GetCodeTemplateInstance("CST\\DBMad.DAL.Partial.cst");
			ctDALExtender.SetProperty("ModelsNamespace",ModelsNamespace);
			ctDALExtender.SetProperty("DALNamespace",DALNamespace);
			ctDALExtender.SetProperty("DALClassNameSurfix","Service");
			ctDALExtender.SetProperty("TargetTable", ST);
			string ctDALExtenderPath = Path + "\\DAL\\" + ctDALExtender.GetFileName();
            if ( !File.Exists(ctDALExtenderPath))
			{
				ctDALExtender.RenderToFile(Path + "\\DAL\\" + ctDALExtender.GetFileName(), true);
		    }
			Helper.Make_csproj_IncludeFile( Path+"\\DAL\\DAL.csproj", ctDALExtender.GetFileName());
		
		
			//DBHelper
			CodeTemplate ctDALHelper = this.GetCodeTemplateInstance("CST\\DBHelper.cst");
			ctDALHelper.RenderToFile(Path + "\\DAL\\AutoGenerate\\" + "DBHelper.cs", true);
			Helper.Make_csproj_IncludeFile( Path+"\\DAL\\DAL.csproj", "AutoGenerate\\" + ctDALHelper.GetFileName());
		}


		
		// BLL
		if (IsReplace_BLL)
		{
			CodeTemplate ctBLL = this.GetCodeTemplateInstance("CST\\DBMad.BLL.cst");
			ctBLL.SetProperty("TargetTable", ST);
			ctBLL.SetProperty("ModelsNamespace",ModelsNamespace);
			ctBLL.SetProperty("DALNamespace",DALNamespace);
			ctBLL.SetProperty("BLLNamespace",BLLNamespace);
			ctBLL.SetProperty("BLLClassNameSurfix","Manager");
			ctBLL.SetProperty("DALClassNameSurfix","Service");
			ctBLL.RenderToFile(Path + "\\BLL\\AutoGenerate\\" + ctBLL.GetFileName(), true);
			Helper.Make_csproj_IncludeFile( Path+"\\BLL\\BLL.csproj", "AutoGenerate\\" + ctBLL.GetFileName());

		   // BLL Extender
		   CodeTemplate ctBLLExtender = this.GetCodeTemplateInstance("CST\\DBMad.BLL.Partial.cst");
			ctBLLExtender.SetProperty("TargetTable", ST);
			ctBLLExtender.SetProperty("ModelsNamespace",ModelsNamespace);
			ctBLLExtender.SetProperty("DALNamespace",DALNamespace);
			ctBLLExtender.SetProperty("BLLNamespace",BLLNamespace);
			ctBLLExtender.SetProperty("BLLClassNameSurfix","Manager");
			ctBLLExtender.SetProperty("DALClassNameSurfix","Service");
			string ctBLLExtenderPath = Path + "\\BLL\\" + ctBLLExtender.GetFileName();
			if (!File.Exists(ctBLLExtenderPath))
		    {
			  ctBLLExtender.RenderToFile(Path + "\\BLL\\" + ctBLLExtender.GetFileName(), true);
		    }
			Helper.Make_csproj_IncludeFile( Path+"\\BLL\\BLL.csproj",  ctBLLExtender.GetFileName());
		}
		//Web.Config
		if (IsReplace)
		{
			CodeTemplate ctWebConfig = this.GetCodeTemplateInstance("CST\\WebConfig.cst");
			string connstr = ConnString+";"+"DataBase="+DataBase;
			ctWebConfig.SetProperty("ConnString",connstr);
			ctWebConfig.RenderToFile(Path + "\\Web\\" + "Web.Config", true);
		}
		
		//Remove All Class1
		/*string ModelClass_Path = Path + "\\Models\\" +"Class1.cs";
		string DalClass_Path = Path + "\\DAL\\" + "Class1.cs";
		string BllClass_Path = Path + "\\BLL\\" + "Class1.cs";
		if (File.Exists(ModelClass_Path)) File.Delete(ModelClass_Path);
		if (File.Exists(DalClass_Path)) File.Delete(DalClass_Path);
		if (File.Exists(BllClass_Path)) File.Delete(BllClass_Path);*/

	}
	
	
}

#region Output
    private string _outputDirectory = String.Empty;
	
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("General")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string Path 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"D:\AutoGenerate";
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}
	#endregion
</script>